{"version":3,"sources":["app.cljs"],"mappings":";AAMA,AAAA,AAAMA;AAAN,AACE,AAAAC,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAA,AAAKiB;AAALnB,AAAAA;AAAA,AAAA,AAAAG,AAAAH,AAAAE;;AAAA;;;AAAA,AAAA;;;AAAA,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC;;AAAA,AAAAD,AAAA,AAAA;;AAAAA;;AAAAJ;;AAAA,AAAA,AAAAM,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAR,AAAAC;AAAA,AAAA,AAAA,AAAAQ,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAC;AAAA,AAAA,AAAAC,AAAAX;AAAA,AAAA,AAAAW,AAAA,AAAAF;;AAAAE;AAAA,AAAA,AAAAC,AAAA,AAAAZ,AAAA;AAAA,AAAAa,AAAAb;AAAA,AAAA,AAAAa,AAAA,AAAA,AAAAC,AAAA,AAAAd,AAAA;;AAAAa;AAAA,AAAAJ;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAN;;;;AAAAM;;;;;AAAAN;;;;;AAAAA;;;;;;;;;AAAAe,AAAA,AAAAC,AAAA,AAAAlB;AAAA,AAAA,AAAAkB,AAAAC,AAAA,AAAAtB;;AAAAqB;;AAAA,AAAA,AAAAE,AAAAH;;;AAAApB;;AAGF;;;AAAA,AAAMyB,AAEHC;AAFH,AAEO,AAAAC,AAAOG;AAAPF,AAAY,AAACG,AAAML,AAAG,AAAKM;AAAL,AAAQ,AAACF,AAAAA,AAAAA;;AAA/B,AAAA,AAAAH,AAAAC,AAAAD,AAAAC,AAACC,AAAAA,AAAAA","names":["app/my-go","c__30868__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__30869__auto__","switch__30673__auto__","state_40327","state_val_40328","inst_40325","cljs.core.async.impl.ioc-helpers/return-chan","statearr-40329","state-machine__30674__auto__","ret-value__30675__auto__","result__30676__auto__","cljs.core/keyword-identical?","ex__30677__auto__","e40330","statearr-40331","cljs.core/seq","statearr-40332","cljs.core/first","state__30870__auto__","statearr-40333","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs.core.println","app/test-async","ch","G__40334","G__40335","app/async","app/done","cljs.core.async.take_BANG_","_"],"sourcesContent":["(ns app\n  (:require-macros [cljs.core.async.macros :refer [go]])\n  (:require\n    [clojure.core.async :as async :refer [take!]]\n    ))\n\n(defn my-go []\n  (go (println \"Hello Processes!\"))\n  )\n\n(defn test-async\n  \"Asynchronous test awaiting ch to produce a value or close.\"\n  [ch] (async done (take! ch (fn [_] (done)))))\n"]}