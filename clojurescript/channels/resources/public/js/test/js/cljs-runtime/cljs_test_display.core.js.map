{"version":3,"sources":["cljs_test_display/core.cljs"],"mappings":"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","names":["js/goog.define","cljs-test-display.core/root-node-id","cljs-test-display.core/change-favicon","cljs-test-display.core/notifications","cljs-test-display.core/printing","js/cljs-test-display","js/cljs-test-display.core","js/cljs-test-display.core.state","cljs-test-display.core/state","cljs.core.atom","cljs-test-display.core/root-app-node","goog.dom/getElement","cljs-test-display.core/push-node!","node","cljs.core.swap_BANG_","cljs.core/update","cljs.core.fnil","cljs.core/conj","cljs-test-display.core/pop-node!","cljs.core/rest","cljs-test-display.core/initialize-state!","cljs.core/reset!","cljs-test-display.core/current-node","cljs.core/first","cljs.core/deref","cljs.core.get","cljs-test-display.core/current-node-parent","cljs.core/second","cljs-test-display.core/next-error-count","cljs.core/inc","js/cljs-test-display.core.register-document-events!","cljs-test-display.core/register-document-events!","cljs.core/memoize","goog.events/listen","goog.dom/getDocument","goog.events.EventType/KEYDOWN","e","cljs.core._EQ_","goog.events.KeyCodes/P","cljs-test-display.core/click-toggle","style-string","cljs-test-display.core/insert-style!","G__37681","G__37682","G__37683","cljs-test-display.core/n","head","goog.dom/getElementsByTagName","goog.dom/appendChild","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","seq37684","G__37685","cljs.core/next","G__37686","self__4723__auto__","tag","attributes","contents","cljs.core.apply","goog.dom/createDom","cljs.core/name","cljs.core/clj->js","cljs.core.mapv","x","js/HTMLElement","cljs.core/Symbol","goog.dom/createTextNode","cljs.core.pr_str","cljs.core.filter","cljs.core/some?","cljs-test-display.core/magic-keyword->attrs","k","cljs.core/Keyword","vec__37702","cljs.core.nth","classes","clojure.string.split","id","clojure.string/starts-with?","cljs.core.subs","G__37705","cljs.core.assoc","cljs.core/not-empty","clojure.string.join","cljs-test-display.core/tag-fn","klass","vec__37707","cljs.core/cons","cljs-test-display.core/div","cljs-test-display.core/span","G__37712","cljs-test-display.core/code","js/Error","code-str","cljs_test_display.core.code","cljs_test_display.core.n","cljs-test-display.core/current-var-info","var","cljs.core/reverse","cljs.test/get-current-env","cljs.core/meta","p__37719","map__37720","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs-test-display.core/process-file-name","ns","file","cljs.core.take","cljs.core/count","cljs-test-display.core/failed?","m","cljs-test-display.core/pluralize","s","n","goog.dom.classlist/toggle","cljs-test-display.core/header-node","cljs-test-display.core/add-header-node!","cljs-test-display.core/contexts-node","cljs.core/seq","cljs.test/testing-contexts-str","p__37726","map__37727","cljs-test-display.core/comparison","actual","expected","cljs-test-display.core/add-fail-node!","formatter-fn","or__4126__auto__","cljs.core/pr-str","temp__5735__auto__","message","curr-node","goog.dom.classlist/add","p__37736","map__37737","cljs-test-display.core/error-comparison","error-number","js/console.log","js/console.error","cljs-test-display.core/add-error-node!","cljs-test-display.core/add-passing-node!","cljs-test-display.core/add-ns-node!","new-current-node","p1__37748#","cljs-test-display.core/add-var-node","map__37755","name","line","info","p1__37751#","p__37757","map__37758","cljs-test-display.core/summary","fail","error","pass","test","assertions","cljs-test-display.core/display-summary!","report-header","summary-node'","goog.dom/removeChildren","cljs-test-display.core/print-comparison","cljs.core.println","G__37766","G__37767","cljs.test/report","cljs.test/inc-report-counter!","cljs.test/testing-vars-str","cljs-test-display.favicon/red","cljs-test-display.favicon/green","cljs-test-display.notify/failure","cljs-test-display.notify/success","cljs-test-display.core/empty-env","cljs.test.empty_env","G__37784","cljs-test-display.core/init!","cljs_test_display.core.init_BANG_","app-node-id","goog/global.document","cljs-test-display.notify/ask-permission!","cljs.core/List"],"sourcesContent":["(ns cljs-test-display.core\n  (:require\n   [cljs.test :refer [report inc-report-counter!\n                      testing-contexts-str\n                      testing-vars-str\n                      get-current-env]\n    :include-macros true]\n   [clojure.string :as string]\n   [goog.dom :as gdom]\n   [goog.dom.classlist :as classlist]\n   [goog.events :as events]\n   [goog.events.EventType :as evtype]\n   [goog.events.KeyCodes :as key-codes]\n   [cljs-test-display.favicon :as favicon]\n   [cljs-test-display.notify :as notify])\n  (:require-macros\n   [cljs-test-display.core :refer [css]]))\n\n;; ------------------------------------------------------------\n;; State Management\n;; ------------------------------------------------------------\n\n;; root-node-id specifies the id of the dom element to mount the\n;; testing application to\n(goog-define root-node-id \"app\")\n\n;; change-favicon specifies wether to change the favicon to red or\n;; green when tests complete\n(goog-define change-favicon true)\n\n;; notifications specifies wether to use the Web Notification API to\n;; to provide feedback about test results\n(goog-define notifications true)\n\n;; printing specifies wether to print out test results in the console\n;; as well\n(goog-define printing false)\n\n(defonce state (atom {}))\n\n(defn root-app-node [] (gdom/getElement root-node-id))\n\n(defn push-node! [node]\n  (swap! state update :current-node (fnil conj (list)) node))\n\n(defn pop-node! []\n  (swap! state update :current-node rest))\n\n(defn initialize-state! []\n  (reset! state {})\n  (push-node! (root-app-node)))\n\n(defn current-node []\n  (first (get @state :current-node)))\n\n(defn current-node-parent []\n  (second (get @state :current-node)))\n\n(defn next-error-count []\n  (:error-count (swap! state update :error-count (fnil inc 0))))\n\n(declare add-header-node! click-toggle n)\n\n(defonce register-document-events!\n  (memoize\n   (fn []\n     (events/listen (gdom/getDocument)\n                    evtype/KEYDOWN\n                    (fn [e]\n                      (when (= (.-keyCode e) key-codes/P)\n                        (click-toggle e)))))))\n\n(let [style-string (css)]\n  (defn insert-style! []\n    (when-not (gdom/getElement \"cljs-test-display-style\")\n      (let [node (n :style\n                    {:id \"cljs-test-display-style\"}\n                    style-string)\n            head (aget (gdom/getElementsByTagName \"head\") 0)]\n        (gdom/appendChild head node)))))\n\n#_ (insert-style!)\n\n;; ------------------------------------------------------------\n;; DOM Node Creation\n;; ------------------------------------------------------------\n\n(defn n [tag attributes & contents]\n  (apply gdom/createDom (name tag) (clj->js attributes)\n         (mapv\n          (fn [x]\n            (cond\n              (instance? js/HTMLElement x)\n              x\n              (or (string? x) (symbol? x))\n              (gdom/createTextNode (str x))\n              :else\n              (gdom/createTextNode (pr-str x))))\n          (filter some? contents))))\n\n(defn magic-keyword->attrs [k]\n  (if (keyword? k)\n    (let [classes (string/split (name k) \".\")\n          [id classes] (if (string/starts-with? (first classes) \"#\")\n                         [(subs (first classes) 1) (rest classes)]\n                         [nil classes])]\n      (cond-> {}\n        id (assoc :id id)\n        (not-empty classes) (assoc :class (string/join \" \" classes))))\n    {}))\n\n(defn tag-fn [tag]\n  (fn [klass & contents]\n    (let [[klass contents] (if (keyword? klass)\n                             [klass contents]\n                             [nil (cons klass contents)])]\n      (apply n tag (magic-keyword->attrs klass) contents))))\n\n(def div (tag-fn :div))\n(def span (tag-fn :span))\n\n(defn code\n  ([code-str] (code nil code-str))\n  ([klass code-str]\n   (n :pre (magic-keyword->attrs klass)\n      (n :code {} (pr-str code-str)))))\n\n;; ------------------------------------------------------------\n;; Data Helpers\n;; ------------------------------------------------------------\n\n(defn current-var-info []\n  (let [var (first (reverse (:testing-vars (get-current-env))))]\n    (meta var)))\n\n(defn process-file-name [{:keys [ns file]}]\n  (string/join \"/\"\n               (reverse\n                (take (inc (count (string/split (name ns) #\"\\.\")))\n                      (reverse (string/split file  #\"[/\\\\]\"))))))\n\n(defn failed? [m]\n  (not (zero? (+ (:fail m) (:error m)))))\n\n(defn pluralize [s n]\n  (if (= n 1) s (str s \"s\")))\n\n;; ------------------------------------------------------------\n;; DOM Templates\n;; ------------------------------------------------------------\n\n;; ------------------------------------------------------------\n;; Header\n\n(defn click-toggle [e]\n  (classlist/toggle (root-app-node) \"hide-passing\"))\n\n(defn header-node []\n  (div :#report-header\n     (div :container.report-body \n          (div :page-title\n               (n :img\n                  {:width 50\n                   :height 50\n                   :src \"https://clojurescript.org/images/cljs-logo-120b.png\"})\n               (div :test-title \"Test Run\"))\n          (div :#summary))))\n\n(defn add-header-node! []\n  (gdom/appendChild (root-app-node) (header-node))\n  (gdom/appendChild (root-app-node)\n                    (div :controls.container\n                     (n :button {:id \"hide-show\"\n                                 :onclick\n                                 click-toggle}\n                        \"Hide/Show Passing\"))))\n\n;; ------------------------------------------------------------\n;; Failure\n\n(defn contexts-node []\n  (when (seq (:testing-contexts (get-current-env)))\n    (div :contexts (testing-contexts-str))))\n\n(defn comparison [{:keys [actual expected]}]\n  (div \n   (code expected)\n   (div :actual (div :arrow \"\u25b6\") (code actual))))\n\n(defn add-fail-node! [m]\n  (let [formatter-fn (or (:formatter (get-current-env)) pr-str)\n        node (div :test-fail\n                  (contexts-node)\n                  (div :fail-body\n                       (when-let [message (:message m)]\n                         (div :test-message message))\n                       (comparison m)))\n        curr-node (current-node)]\n    (classlist/add curr-node \"has-failures\")\n    (classlist/add (current-node-parent) \"has-failures\")\n    (gdom/appendChild curr-node node)))\n\n;; ------------------------------------------------------------\n;; Error\n\n(defn error-comparison [{:keys [expected actual]}]\n  (div\n   (code expected)\n   (div :cljs-test-actual\n        (span :error-prefix \"Error: \")\n        (when actual\n          (span :error-message (.-message actual)))\n        (when actual\n          (let [error-number (next-error-count)]\n            (js/console.log \"CLJS Test Error #\" error-number)\n            (js/console.error actual)\n            (div :view-stacktrace\n                 (str \"For stacktrace: See error number \" error-number \" in console\")))))))\n\n(defn add-error-node! [m]\n  (let [formatter-fn (or (:formatter (get-current-env)) pr-str)\n        node (div :test-fail.test-error\n                  (contexts-node)\n                  (div :fail-body\n                       (when-let [message (:message m)]\n                         (div :test-message message))\n                       (error-comparison m)))\n        curr-node (current-node)]\n    (classlist/add curr-node \"has-errors\")\n    (classlist/add (current-node-parent) \"has-errors\")\n    (gdom/appendChild curr-node node)))\n\n;; ------------------------------------------------------------\n;; Passing\n\n(defn add-passing-node! [m]\n  (gdom/appendChild (current-node) (div :test-passing)))\n\n;; ------------------------------------------------------------\n;; NS\n\n(defn add-ns-node! [m]\n  (let [curr-node (current-node)\n        new-current-node\n        (div :container.test-ns\n           (n :h2 {} (:ns m)))]\n    (swap! state update :current-node #(cons new-current-node %))\n    (gdom/appendChild\n     curr-node\n     new-current-node)))\n\n;; ------------------------------------------------------------\n;; Var\n\n(defn add-var-node [m]\n  (let [curr-node (current-node)\n        {:keys [name line file] :as info} (current-var-info)\n        node\n        (div :test-var\n             (div :var-header\n                  (str \"/\" name)\n                  (when line\n                    (div :test-var-line (if file\n                                          (process-file-name info)\n                                          \"line\") \":\"\n                         (n :span {} line)))))]\n    (swap! state update :current-node #(cons node %))\n    (gdom/appendChild curr-node node)))\n\n;; ------------------------------------------------------------\n;; Summary\n\n(defn summary [{:keys [fail error pass test] :as m}]\n  (div :summary-body\n       (when (not (zero? fail))\n         (div :report-number (str fail (pluralize \" failure\" fail))))\n       (when (not (zero? error))\n         (div :report-number (str error (pluralize \" error\" error))))\n       (when-not (failed? m)\n         (div :report-number \"All Tests Passed\"))\n       (div :total-tests\n            (div \"Totals\")\n            (div :test-counts\n                 (div (str test (pluralize \" Test\" test)))\n                 (let [assertions (+ pass fail error)]\n                   (div (str assertions (pluralize \" Assertion\" assertions))))))))\n\n(defn display-summary! [m]\n  (let [report-header (gdom/getElement \"report-header\")\n        summary-node' (gdom/getElement \"summary\")]\n    (classlist/add report-header (if (failed? m)\n                                   \"tests-fail\"\n                                   \"tests-succeed\"))\n    (gdom/removeChildren summary-node')\n    (gdom/appendChild summary-node' (summary m))))\n\n;; ------------------------------------------------------------\n;; Hooking into cljs.test/report\n;; ------------------------------------------------------------\n\n(defn print-comparison [m]\n  (let [formatter-fn (or (:formatter (get-current-env)) pr-str)]\n    (println \"expected:\" (formatter-fn (:expected m)))\n    (println \"  actual:\" (formatter-fn (:actual m)))))\n\n(defmethod report [::default :pass] [m]\n  (add-passing-node! m)\n  (inc-report-counter! :pass))\n\n;; namespace start and end\n\n(defmethod report [::default :begin-test-ns] [m]\n  (add-ns-node! m)\n  (when printing\n    (println \"\\nTesting\" (name (:ns m)))))\n\n(defmethod report [::default :end-test-ns] [m]\n  (swap! state update :current-node rest))\n\n;; var start and end\n\n(defmethod report [::default :begin-test-var] [m]\n  (add-var-node m))\n\n(defmethod report [::default :end-test-var] [m]\n  (swap! state update :current-node rest))\n\n;; failure and errors\n\n(defmethod report [::default :fail] [m]\n  (add-fail-node! m)\n  (inc-report-counter! :fail)\n  (when printing\n    (println \"\\nFAIL in\" (testing-vars-str m))\n    (when (seq (:testing-contexts (get-current-env)))\n      (println (testing-contexts-str)))\n    (when-let [message (:message m)] (println message))\n    (print-comparison m)))\n\n(defmethod report [::default :error] [m]\n  (inc-report-counter! :error)\n  (println \"\\nERROR in\" (testing-vars-str m))\n  (when (seq (:testing-contexts (get-current-env)))\n    (println (testing-contexts-str)))\n  (when-let [message (:message m)] (println message))\n  (print-comparison m)\n  ;; display AFTER so that error shows up in console after the printed error\n  (add-error-node! m))\n\n;; Ignore these but keep them as a reference\n#_(defmethod report [::default :end-run-tests] [m])\n#_(defmethod report [::default :end-test-all-vars] [m])\n#_(defmethod report [::default :end-test-vars] [m])\n\n;; summary\n\n(defmethod report [::default :summary] [m]\n  (when change-favicon\n    (if (failed? m)\n      (favicon/red)\n      (favicon/green)))\n  (when notifications\n    (if (failed? m)\n      (notify/failure m)\n      (notify/success)))  \n  (display-summary! m)\n  (gdom/appendChild (root-app-node)\n                    (div :footer\n                         (div :container\n                              (div :tip\n                                   \"Hit the \"\n                                   (span :control-key \"P\")\n                                   \" key to toggle the display of passing tests.\"))))\n  (when printing\n    (println \"\\nRan\" (:test m) \"tests containing\"\n             (+ (:pass m) (:fail m) (:error m)) \"assertions.\")\n    (println (:fail m) \"failures,\" (:error m) \"errors.\")))\n\n;; ------------------------------------------------------------\n;; Main API\n;; ------------------------------------------------------------\n\n(defn empty-env []\n  (assoc (cljs.test/empty-env) :reporter ::default))\n\n(defn init!\n  \"This function initializes the environment for a test run. It must\n  be called before every test run.\n\n  As a convenience it returns a cljs.test/empty-env initialized so\n  that the test run will use the cljs-test-display formatter.\n\n  This function takes an optional single argument: the id of the DOM\n  node to mount.  It defaults to \\\"app\\\"\n\n  Example Usage:\n\n  (cljs.test/run-tests (cljs-test-display/init! \\\"app\\\")\n                       'example.core-test\n                       'example.core-other-test)\"\n  ([] (init! nil))\n  ([app-node-id]\n   (if (nil? goog/global.document) ;; if not in HTML env ingore display\n     (cljs.test/empty-env)\n     (do\n       (when app-node-id\n         (assert (or (string? app-node-id)\n                     (symbol? app-node-id)\n                     (keyword? app-node-id))\n                 \"Must provide an something we can call cljs.core/name on.\")\n         (set! root-node-id (name app-node-id)))\n       (assert (gdom/getElement (name root-node-id))\n               (str \"cljs-test-display: Element with id \"\n                    (pr-str root-node-id)\n                    \" does not exist.\"))\n       (when notifications (notify/ask-permission!))\n       (insert-style!)\n       (register-document-events!)\n       (set! (.-innerHTML (root-app-node)) \"\")\n       (add-header-node!)\n       (initialize-state!)\n       (empty-env)))))\n"]}