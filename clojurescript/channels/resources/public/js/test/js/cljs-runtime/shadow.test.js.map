{"version":3,"sources":["shadow/test.cljs"],"mappings":"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","names":["shadow.test/test-vars-grouped-block","vars","p1__37385#","cljs.core/group-by","cljs.core/meta","cljs.core.sort_by","cljs.core/first","cljs.core.mapcat","p__37392","vec__37393","cljs.core.nth","ns","cljs.test/report","cljs.test/block","env","cljs.test/get-current-env","once-fixtures","cljs.core.get_in","each-fixtures","G__37396","cljs.core/Keyword","js/Error","cljs.test/execution-strategy","cljs.core.filter","cljs.core.comp","cljs.core.partial","cljs.test/wrap-map-fixtures","cljs.test/test-var-block","each-fixture-fn","cljs.test/join-fixtures","G__37399","fexpr__37398","seq__37400","cljs.core/seq","chunk__37402","count__37403","i__37404","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/next","v","t","G__37408","G__37410","cljs.test/run-block","cljs.test/test-var-block*","cljs.test/disable-async","shadow.test/test-ns-block","cljs.core/Symbol","map__37412","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","test-ns","shadow.test.env/get-test-ns-info","cljs.core/not","cljs.core.println","p__37419","map__37420","shadow.test/prepare-test-run","report-fn","orig-report","cljs.test/set-env!","cljs.core.assoc","seq__37422","chunk__37424","count__37425","i__37426","vec__37451","map__37454","vec__37460","map__37464","ns-info","shadow.test.env/get-tests","fixtures","fix","cljs.test.update_current_env_BANG_","cljs.core/assoc","p1__37417#","cljs.core.map","cljs.core/set","shadow.test/finish-test-run","block","cljs.core/vector?","cljs.core.conj","map__37471","report-counters","var_args","G__37487","shadow.test/run-test-vars","test-vars","shadow.test.run_test_vars","cljs.test.empty_env","cljs.core.into","G__37492","shadow.test/test-ns","shadow.test.test_ns","map__37502","G__37519","shadow.test/run-tests","shadow.test.run_tests","shadow.test.env/get-test-namespaces","namespaces","cljs.core/set?","shadow.test.env/get-test-vars","p1__37506#","cljs.core/contains?","G__37529","shadow.test/run-all-tests","shadow.test.run_all_tests","re","p1__37527#","or__4126__auto__","cljs.core/re-matches"],"sourcesContent":["(ns shadow.test\n  \"cljs.test just without all those damn macros\n   requires the shadow.build.cljs-hacks deftest mod which calls shadow.test/register-test\"\n  (:require [cljs.test :as ct]\n            [shadow.test.env :as env]))\n\n(defn test-vars-grouped-block\n  \"like ct/test-vars-block but more generic\n   groups vars by namespace, executes fixtures\"\n  [vars]\n  (->> vars\n       (group-by #(-> % meta :ns))\n       ;; more predictable test ordering\n       ;; FIXME: should maybe also allow randomizing to detect tests that rely on call order\n       (sort-by first)\n       (mapcat (fn [[ns vars]]\n                 [(fn []\n                    (ct/report {:type :begin-test-ns :ns ns}))\n                  ;; FIXME: this is too complex, should simplify\n                  (fn []\n                    (ct/block\n                      (let [env (ct/get-current-env)\n                            once-fixtures (get-in env [:once-fixtures ns])\n                            each-fixtures (get-in env [:each-fixtures ns])]\n                        (case (ct/execution-strategy once-fixtures each-fixtures)\n                          :async\n                          (->> vars\n                               (filter (comp :test meta))\n                               (mapcat (comp (partial ct/wrap-map-fixtures each-fixtures)\n                                         ct/test-var-block))\n                               (ct/wrap-map-fixtures once-fixtures))\n                          :sync\n                          (let [each-fixture-fn (ct/join-fixtures each-fixtures)]\n                            [(fn []\n                               ((ct/join-fixtures once-fixtures)\n                                (fn []\n                                  (doseq [v vars]\n                                    (when-let [t (:test (meta v))]\n                                      ;; (alter-meta! v update :test disable-async)\n                                      (each-fixture-fn\n                                        (fn []\n                                          ;; (test-var v)\n                                          (ct/run-block\n                                            (ct/test-var-block* v (ct/disable-async t))))))))))])))))\n                  (fn []\n                    (ct/report {:type :end-test-ns :ns ns}))])\n         )))\n\n(defn test-ns-block\n  \"Like test-ns, but returns a block for further composition and\n  later execution.  Does not clear the current env.\"\n  ([ns]\n   {:pre [(symbol? ns)]}\n   (let [{:keys [vars] :as test-ns} (env/get-test-ns-info ns)]\n\n     (if-not test-ns\n       [(fn []\n          (println (str \"Namespace: \" ns \" not found, no tests to run.\")))]\n       (test-vars-grouped-block vars)))))\n\n(defn prepare-test-run [{:keys [report-fn] :as env} vars]\n  (let [orig-report ct/report]\n    [(fn []\n       (ct/set-env! (assoc env ::report-fn orig-report))\n\n       (when report-fn\n         (set! ct/report report-fn))\n\n       ;; setup all known fixtures\n       (doseq [[test-ns ns-info] (env/get-tests)\n               :let [{:keys [fixtures]} ns-info]]\n         (when-let [fix (:once fixtures)]\n           (ct/update-current-env! [:once-fixtures] assoc test-ns fix))\n\n         (when-let [fix (:each fixtures)]\n           (ct/update-current-env! [:each-fixtures] assoc test-ns fix)))\n\n       ;; just in case report-fn wants to know when things starts\n       (ct/report {:type :begin-run-tests\n                   :var-count (count vars)\n                   :ns-count (->> vars\n                                  (map #(-> % meta :ns))\n                                  (set)\n                                  (count))}))]))\n\n(defn finish-test-run [block]\n  {:pre [(vector? block)]}\n  (conj block\n    (fn []\n      (let [{::keys [report-fn] :keys [report-counters] :as env} (ct/get-current-env)]\n        (ct/report (assoc report-counters :type :summary))\n        (ct/report (assoc report-counters :type :end-run-tests))\n        (set! ct/report report-fn)\n        ))))\n\n;; API Fns\n\n(defn run-test-vars\n  \"tests all vars grouped by namespace, expects seq of test vars, can be obtained from env\"\n  ([test-vars]\n   (run-test-vars (ct/empty-env) test-vars))\n  ([env vars]\n   (-> (prepare-test-run env vars)\n       (into (test-vars-grouped-block vars))\n       (finish-test-run)\n       (ct/run-block))))\n\n(defn test-ns\n  \"test all vars for given namespace symbol\"\n  ([ns]\n   (test-ns (ct/empty-env) ns))\n  ([env ns]\n   (let [{:keys [vars]} (env/get-test-ns-info ns)]\n     (-> (prepare-test-run env vars)\n         (into (test-vars-grouped-block vars))\n         (finish-test-run)\n         (ct/run-block)))))\n\n(defn run-tests\n  \"test all vars in specified namespace symbol set\"\n  ([]\n   (run-tests (ct/empty-env)))\n  ([env]\n   (run-tests env (env/get-test-namespaces)))\n  ([env namespaces]\n   {:pre [(set? namespaces)]}\n   (let [vars (->> (env/get-test-vars)\n                   (filter #(contains? namespaces (-> % meta :ns))))]\n     (-> (prepare-test-run env vars)\n         (into (test-vars-grouped-block vars))\n         (finish-test-run)\n         (ct/run-block)))))\n\n(defn run-all-tests\n  \"Runs all tests in all namespaces; prints results.\n  Optional argument is a regular expression; only namespaces with\n  names matching the regular expression (with re-matches) will be\n  tested.\"\n  ([] (run-all-tests (ct/empty-env) nil))\n  ([env] (run-all-tests env nil))\n  ([env re]\n   (run-tests env\n     (->> (env/get-test-namespaces)\n          (filter #(or (nil? re)\n                       (re-matches re (str %))))\n          (into #{})))))\n"]}